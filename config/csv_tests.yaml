# Enhanced CSV Test Questions for QwenSense
# These test questions showcase the new CSV aggregation and filtering capabilities
# They can be added to the main test_definitions.yaml file or run separately

tests:
  # Basic CSV Aggregation Functions
  - question_id: 101
    samples: 2
    template: "What is the total amount of all orders in {{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv? Reply only with the total amount."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum:amount:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv"
      content:
        headers: ["order_id", "customer", "amount", "status", "region"]
        rows: 50

  - question_id: 102
    samples: 2
    template: "What is the average salary in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the average salary."
    scoring_type: "stringmatch"
    expected_response: "{{csv_avg:salary:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "department", "salary", "years_experience", "status"]
        rows: 100

  - question_id: 103
    samples: 2
    template: "How many valid entries are in the customer name column of {{artifacts}}/{{qs_id}}/{{entity1}}/customers.csv? Reply only with the count."
    scoring_type: "stringmatch"
    expected_response: "{{csv_count:name:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/customers.csv"
      content:
        headers: ["id", "name", "email", "city", "signup_date"]
        rows: 75

  # Filtered CSV Aggregation Functions
  - question_id: 104
    samples: 2
    template: "What is the total amount of completed orders in {{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv? Reply only with the total amount."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum_where:amount:status:==:completed:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv"
      content:
        headers: ["order_id", "customer", "amount", "status", "region"]
        rows: 50

  - question_id: 105
    samples: 2
    template: "What is the average salary for employees in the Engineering department in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the average salary."
    scoring_type: "stringmatch"
    expected_response: "{{csv_avg_where:salary:department:==:Engineering:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "department", "salary", "years_experience", "status"]
        rows: 100

  - question_id: 106
    samples: 2
    template: "How many orders are above 1000 in {{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv? Reply only with the count."
    scoring_type: "stringmatch"
    expected_response: "{{csv_count_where:order_id:amount:>:1000:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv"
      content:
        headers: ["order_id", "customer", "amount", "status", "region"]
        rows: 50

  # String-based Filtering
  - question_id: 107
    samples: 2
    template: "What is the total amount of orders from customers whose names contain 'Smith' in {{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv? Reply only with the total amount."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum_where:amount:customer:contains:Smith:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv"
      content:
        headers: ["order_id", "customer", "amount", "status", "region"]
        rows: 50

  - question_id: 108
    samples: 2
    template: "How many employees work in departments containing 'Tech' in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the count."
    scoring_type: "stringmatch"
    expected_response: "{{csv_count_where:name:department:contains:Tech:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "department", "salary", "years_experience", "status"]
        rows: 100

  # Numeric Comparison Filtering
  - question_id: 109
    samples: 2
    template: "How many employees have more than 5 years of experience in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the count."
    scoring_type: "stringmatch"
    expected_response: "{{csv_count_where:name:years_experience:>:5:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "department", "salary", "years_experience", "status"]
        rows: 100

  - question_id: 110
    samples: 2
    template: "What is the total salary cost for employees earning 60000 or more in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the total."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum_where:salary:salary:>=:60000:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "department", "salary", "years_experience", "status"]
        rows: 100

  # Complex Business Logic Examples
  - question_id: 111
    samples: 2
    template: "What is the total revenue from active customers in {{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv? Reply only with the total revenue."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum_where:amount:status:==:active:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/sales.csv"
      content:
        headers: ["customer_id", "customer_name", "amount", "status", "date"]
        rows: 75

  - question_id: 112
    samples: 2
    template: "What is the average age of employees in departments starting with 'Sales' in {{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv? Reply only with the average age."
    scoring_type: "stringmatch"
    expected_response: "{{csv_avg_where:age:department:startswith:Sales:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/employees.csv"
      content:
        headers: ["name", "age", "department", "salary", "location"]
        rows: 80

  # Edge Cases and Advanced Filtering
  - question_id: 113
    samples: 2
    template: "How many products have names ending with 'Pro' in {{artifacts}}/{{qs_id}}/{{entity1}}/products.csv? Reply only with the count."
    scoring_type: "stringmatch"
    expected_response: "{{csv_count_where:product_name:product_name:endswith:Pro:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/products.csv"
      content:
        headers: ["product_id", "product_name", "price", "category", "in_stock"]
        rows: 60

  - question_id: 114
    samples: 2
    template: "What is the total value of orders that are NOT cancelled in {{artifacts}}/{{qs_id}}/{{entity1}}/orders.csv? Reply only with the total value."
    scoring_type: "stringmatch"
    expected_response: "{{csv_sum_where:total:status:!=:cancelled:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/orders.csv"
      content:
        headers: ["order_id", "customer", "total", "status", "date"]
        rows: 40

  # Mixed Data Types
  - question_id: 115
    samples: 2
    template: "What is the average score of students in courses containing 'Math' in {{artifacts}}/{{qs_id}}/{{entity1}}/grades.csv? Reply only with the average score."
    scoring_type: "stringmatch"
    expected_response: "{{csv_avg_where:score:course:contains:Math:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/grades.csv"
      content:
        headers: ["student_id", "student_name", "course", "score", "semester"]
        rows: 90
