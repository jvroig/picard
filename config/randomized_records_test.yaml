# PICARD Randomized Records Test
# Comprehensive test demonstrating unified {{numeric}} randomization syntax across all sandbox types
# This test exercises the new unified approach where all file generators use {{numeric}} variables
# for consistent randomization instead of the deprecated [min,max] syntax

tests:

  #####################################
  # SECTION 100: CSV Files with Random Records
  #####################################

  - question_id: 101
    samples: 20
    template: "Analyze the customer data in {{artifacts}}/{{qs_id}}/customers.csv and count how many customers are from {{semantic1:city}}. Write your answer to {{artifacts}}/{{qs_id}}/city_count.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/city_count.txt"
    expected_content: "{{csv_count_where:CUST_ID:CITY:==:{{semantic1:city}}:TARGET_FILE[customer_data]}}"
    sandbox_setup:
      components:
        - type: "create_csv"
          name: "customer_data"
          target_file: "{{artifacts}}/{{qs_id}}/customers.csv"
          content:
            headers: ["CUST_ID", "CUST_NAME", "CITY", "AGE", "DEPT", "SALARY"]
            header_types: ["id", "person_name", "city", "age", "department", "salary"]
            rows: "{{number1:15:35}}"  # Random between 15-35 records

  - question_id: 102
    samples: 20
    template: "Calculate the average salary for the {{semantic1:department}} department in {{artifacts}}/{{qs_id}}/employees.csv and save it as a JSON file {{artifacts}}/{{qs_id}}/avg_salary.json with key 'average_salary'"
    scoring_type: "readfile_jsonmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/avg_salary.json"
    expected_content: '{"average_salary": {{csv_avg_where:SALARY:DEPARTMENT:==:{{semantic1:department}}:TARGET_FILE[employee_data]}}}'
    sandbox_setup:
      components:
        - type: "create_csv"
          name: "employee_data"
          target_file: "{{artifacts}}/{{qs_id}}/employees.csv"
          content:
            headers: ["EMP_ID", "EMP_NAME", "DEPARTMENT", "SALARY", "EXPERIENCE", "STATUS"]
            header_types: ["id", "person_name", "department", "salary", "experience", "status"]
            rows: "{{number2:20:50}}"  # Random between 20-50 records

  #####################################
  # SECTION 200: SQLite Databases with Random Records
  #####################################

  - question_id: 201
    samples: 20
    template: "Query the database {{artifacts}}/{{qs_id}}/company.db to find all products in the {{semantic1:category}} category and count them. Save the count to {{artifacts}}/{{qs_id}}/product_count.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/product_count.txt"
    expected_content: "{{sqlite_query:SELECT COUNT(*) FROM products WHERE category = '{{semantic1:category}}':TARGET_FILE[product_db]}}"
    sandbox_setup:
      components:
        - type: "create_sqlite"
          name: "product_db"
          target_file: "{{artifacts}}/{{qs_id}}/company.db"
          content:
            table_name: "products"
            columns:
              - {name: "PRODUCT_ID", type: "auto_id"}
              - {name: "PRODUCT_NAME", type: "TEXT", data_type: "product"}
              - {name: "CATEGORY", type: "TEXT", data_type: "category"}
              - {name: "PRICE", type: "REAL", data_type: "price"}
              - {name: "COMPANY", type: "TEXT", data_type: "company"}
              - {name: "IN_STOCK", type: "TEXT", data_type: "boolean"}
            rows: "{{number3:10:25}}"  # Random between 10-25 records

  - question_id: 202
    samples: 20
    template: "In {{artifacts}}/{{qs_id}}/enterprise.db, find the total sales amount for all orders from customers in the {{semantic1:department}} department. Write the result to {{artifacts}}/{{qs_id}}/dept_sales.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/dept_sales.txt"
    expected_content: "{{sqlite_query:SELECT SUM(o.ORDER_AMOUNT) FROM orders o JOIN customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID WHERE c.DEPARTMENT = '{{semantic1:department}}':TARGET_FILE[enterprise_db]}}"
    sandbox_setup:
      components:
        - type: "create_sqlite"
          name: "enterprise_db"
          target_file: "{{artifacts}}/{{qs_id}}/enterprise.db"
          content:
            tables:
              - name: "customers"
                columns:
                  - {name: "CUSTOMER_ID", type: "auto_id"}
                  - {name: "CUSTOMER_NAME", type: "TEXT", data_type: "person_name"}
                  - {name: "DEPARTMENT", type: "TEXT", data_type: "department"}
                  - {name: "CITY", type: "TEXT", data_type: "city"}
                  - {name: "EMAIL", type: "TEXT", data_type: "email"}
                rows: "{{number4:8:15}}"  # Random between 8-15 customers
              - name: "orders"
                columns:
                  - {name: "ORDER_ID", type: "auto_id"}
                  - {name: "CUSTOMER_ID", type: "INTEGER", foreign_key: "customers.CUSTOMER_ID"}
                  - {name: "ORDER_AMOUNT", type: "INTEGER", data_type: "currency"}
                  - {name: "ORDER_DATE", type: "TEXT", data_type: "date"}
                  - {name: "STATUS", type: "TEXT", data_type: "status"}
                rows: "{{number5:25:60}}"  # Random between 25-60 orders

  #####################################
  # SECTION 300: JSON Files with Random Array Sizes
  #####################################

  - question_id: 301
    samples: 20
    template: "Parse the JSON file {{artifacts}}/{{qs_id}}/company_data.json and count how many departments have more than 5 employees. Save your answer to {{artifacts}}/{{qs_id}}/large_depts.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/large_depts.txt"
    expected_content: "{{json_count_where:$.departments[?(@.employees.length > 5)]:TARGET_FILE[company_json]}}"
    sandbox_setup:
      components:
        - type: "create_json"
          name: "company_json"
          target_file: "{{artifacts}}/{{qs_id}}/company_data.json"
          content:
            schema:
              company: "company"
              headquarters: "city"
              departments:
                type: "array"
                count: "{{number6:3:8}}"  # Random between 3-8 departments
                items:
                  name: "department"
                  budget: "currency"
                  manager:
                    name: "person_name"
                    email: "email"
                  employees:
                    type: "array"
                    count: "{{number7:2:12}}"  # Random between 2-12 employees per department
                    items:
                      name: "person_name"
                      role: "category"
                      salary: "salary"
                      experience: "experience"

  - question_id: 302
    samples: 20
    template: "Analyze {{artifacts}}/{{qs_id}}/products_catalog.json and find the average price of all products. Create {{artifacts}}/{{qs_id}}/avg_price.json with the result using key 'average_price'"
    scoring_type: "readfile_jsonmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/avg_price.json"
    expected_content: '{"average_price": {{json_avg:$.products[*].price:TARGET_FILE[catalog_json]}}}'
    sandbox_setup:
      components:
        - type: "create_json"
          name: "catalog_json"
          target_file: "{{artifacts}}/{{qs_id}}/products_catalog.json"
          content:
            schema:
              catalog_info:
                name: "company"
                version: "id"
                updated: "date"
              products:
                type: "array"
                count: "{{number8:15:40}}"  # Random between 15-40 products
                items:
                  id: "id"
                  name: "product"
                  category: "category"
                  price: "price"
                  manufacturer: "company"
                  in_stock: "boolean"
                  tags:
                    type: "array"
                    count: "{{number9:1:5}}"  # Random between 1-5 tags per product
                    items: "lorem_word"

  #####################################
  # SECTION 400: YAML Configuration Files with Random Arrays
  #####################################

  - question_id: 401
    samples: 20
    template: "Read the YAML configuration in {{artifacts}}/{{qs_id}}/app_config.yaml and count how many services are enabled. Write the count to {{artifacts}}/{{qs_id}}/enabled_services.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/enabled_services.txt"
    expected_content: "{{yaml_count_where:$.services[?(@.enabled == true)]:TARGET_FILE[app_config]}}"
    sandbox_setup:
      components:
        - type: "create_yaml"
          name: "app_config"
          target_file: "{{artifacts}}/{{qs_id}}/app_config.yaml"
          content:
            schema:
              application:
                name: "product"
                version: "id"
                environment: "category"
              database:
                host: "city"
                port: "id"
                name: "company"
              services:
                type: "array"
                count: "{{number10:4:12}}"  # Random between 4-12 services
                items:
                  name: "product"
                  enabled: "boolean"
                  port: "id"
                  timeout: "score"
                  resources:
                    memory: "currency"
                    cpu: "score"
              features:
                type: "array"
                count: "{{number11:2:6}}"  # Random between 2-6 features
                items:
                  name: "category"
                  enabled: "boolean"
                  config:
                    priority: "score"
                    timeout: "age"

  - question_id: 402
    samples: 20
    template: "Parse {{artifacts}}/{{qs_id}}/team_config.yaml and find the team with the highest budget. Save the team name to {{artifacts}}/{{qs_id}}/richest_team.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/richest_team.txt"
    expected_content: "{{yaml_max_value:$.teams[*].name:$.teams[*].budget:TARGET_FILE[team_config]}}"
    sandbox_setup:
      components:
        - type: "create_yaml"
          name: "team_config"
          target_file: "{{artifacts}}/{{qs_id}}/team_config.yaml"
          content:
            schema:
              organization: "company"
              location: "city"
              teams:
                type: "array"
                count: "{{number12:3:7}}"  # Random between 3-7 teams
                items:
                  name: "department"
                  budget: "currency"
                  lead:
                    name: "person_name"
                    email: "email"
                    experience: "experience"
                  members:
                    type: "array"
                    count: "{{number13:3:10}}"  # Random between 3-10 members per team
                    items:
                      name: "person_name"
                      role: "category"
                      skills:
                        type: "array"
                        count: "{{number14:2:5}}"  # Random between 2-5 skills per member
                        items: "lorem_word"

  #####################################
  # SECTION 500: XML Documents with Random Nested Arrays
  #####################################

  - question_id: 501
    samples: 20
    template: "Process the XML file {{artifacts}}/{{qs_id}}/library_system.xml and count how many books are in the {{semantic1:category}} category. Write the result to {{artifacts}}/{{qs_id}}/category_count.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/category_count.txt"
    expected_content: "{{xpath_count://book[category='{{semantic1:category}}']:TARGET_FILE[library_xml]}}"
    sandbox_setup:
      components:
        - type: "create_xml"
          name: "library_xml"
          target_file: "{{artifacts}}/{{qs_id}}/library_system.xml"
          content:
            schema:
              library:
                name: "company"
                location: "city"
                books:
                  type: "array"
                  count: "{{number15:12:30}}"  # Random between 12-30 books
                  items:
                    id: "id"
                    title: "product"
                    author: "person_name"
                    category: "category"
                    isbn: "id"
                    year: "age"
                    available: "boolean"
                sections:
                  type: "array"
                  count: "{{number16:3:6}}"  # Random between 3-6 sections
                  items:
                    name: "category"
                    capacity: "score"
            root_element: "catalog"

  - question_id: 502
    samples: 20
    template: "Analyze {{artifacts}}/{{qs_id}}/enterprise_data.xml and find the department with the most employees. Save the department name to {{artifacts}}/{{qs_id}}/largest_dept.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/largest_dept.txt"
    expected_content: "{{xpath_max_count://department/name:./employees/employee:TARGET_FILE[enterprise_xml]}}"
    sandbox_setup:
      components:
        - type: "create_xml"
          name: "enterprise_xml"
          target_file: "{{artifacts}}/{{qs_id}}/enterprise_data.xml"
          content:
            schema:
              company:
                name: "company"
                headquarters: "city"
                departments:
                  type: "array"
                  count: "{{number17:4:8}}"  # Random between 4-8 departments
                  items:
                    name: "department"
                    budget: "currency"
                    manager: "person_name"
                    employees:
                      type: "array"
                      count: "{{number18:5:20}}"  # Random between 5-20 employees per department
                      items:
                        name: "person_name"
                        role: "category"
                        salary: "salary"
                        projects:
                          type: "array"
                          count: "{{number19:1:4}}"  # Random between 1-4 projects per employee
                          items:
                            name: "product"
                            status: "status"
                            priority: "score"
            root_element: "organization"

  #####################################
  # SECTION 600: Mixed Multi-Format Tests with Random Data
  #####################################

  - question_id: 601
    samples: 20
    template: "Create a comprehensive report by analyzing data from all these files: {{artifacts}}/{{qs_id}}/data.csv, {{artifacts}}/{{qs_id}}/config.yaml, and {{artifacts}}/{{qs_id}}/metadata.json. Count the total number of records across all files and save to {{artifacts}}/{{qs_id}}/total_records.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{qs_id}}/total_records.txt"
    expected_content: "{{math_add:{{csv_count:ID:TARGET_FILE[mixed_csv]}}:{{json_count:$.items[*]:TARGET_FILE[mixed_json]}}:{{yaml_count:$.entries[*]:TARGET_FILE[mixed_yaml]}}}}"
    sandbox_setup:
      components:
        - type: "create_csv"
          name: "mixed_csv"
          target_file: "{{artifacts}}/{{qs_id}}/data.csv"
          content:
            headers: ["ID", "NAME", "TYPE", "VALUE", "STATUS"]
            header_types: ["id", "person_name", "category", "currency", "status"]
            rows: "{{number20:10:25}}"  # Random CSV records
        - type: "create_json"
          name: "mixed_json"
          target_file: "{{artifacts}}/{{qs_id}}/metadata.json"
          content:
            schema:
              source: "company"
              timestamp: "date"
              items:
                type: "array"
                count: "{{number21:8:20}}"  # Random JSON array size
                items:
                  key: "lorem_word"
                  value: "entity_pool"
                  priority: "score"
        - type: "create_yaml"
          name: "mixed_yaml"
          target_file: "{{artifacts}}/{{qs_id}}/config.yaml"
          content:
            schema:
              system: "product"
              version: "id"
              entries:
                type: "array"
                count: "{{number22:5:15}}"  # Random YAML array size
                items:
                  name: "category"
                  enabled: "boolean"
                  weight: "score"