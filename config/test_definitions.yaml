# QwenSense Test Definitions
# Example test cases demonstrating different scoring types

tests:
  - question_id: 1
    samples: 2
    template: "Write the text 'Hello {{entity1}}!' inside this file: {{artifacts}}/{{entity2}}.txt"
    scoring_type: "readfile_stringmatch"
    file_to_read: "{{artifacts}}/{{entity2}}.txt"
    expected_content: 'Hello {{entity1}}!'
  
  - question_id: 2
    samples: 2
    template: "Create these files: {{entity1}}.log and {{entity2}}.config in the {{artifacts}} directory"
    scoring_type: "files_exist"
    files_to_check:
      - "{{artifacts}}/{{entity1}}.log"
      - "{{artifacts}}/{{entity2}}.config"
  
  - question_id: 3
    samples: 2
    template: "Respond with only this word: {{entity1}}"
    scoring_type: "stringmatch"
    expected_response: "{{entity1}}"
  
  - question_id: 4
    samples: 2
    template: "Create this directory structure inside the folder `{{artifacts}}`: {{expected_structure}}"
    scoring_type: "directory_structure"
    expected_structure:
      - "{{artifacts}}/{{entity1}}/"
      - "{{artifacts}}/{{entity1}}/{{entity2}}/"
      - "{{artifacts}}/{{entity1}}/logs/"
      - "{{artifacts}}/{{entity1}}/logs/{{entity3}}.log"
      - "{{artifacts}}/{{entity4}}/"
      - "{{artifacts}}/{{entity4}}/README.md"

  - question_id: 5
    samples: 2
    template: "Read the file {{artifacts}}/{{qs_id}}/{{entity1}}/notes.txt and tell me what line 3 says."
    scoring_type: "stringmatch"
    expected_response: "{{file_line:3:TARGET_FILE}}"
    sandbox_setup:
      type: "create_files"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/notes.txt"
      content:
        type: "lorem_lines"
        count: 7

  - question_id: 6
    samples: 1  
    template: "What is the name of the first person in {{artifacts}}/{{qs_id}}/{{entity1}}/people.csv?"
    scoring_type: "stringmatch"
    expected_response: "{{csv_value:0:name:TARGET_FILE}}"
    sandbox_setup:
      type: "create_csv"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}/people.csv" 
      content:
        headers: ["name", "age", "city"]
        rows: 5

  # SQLite database examples
  - question_id: 7
    samples: 2
    template: "Query the SQLite database {{artifacts}}/{{qs_id}}/{{entity1}}.db and tell me the name of the first customer. Hint: study the schema first to know how to navigate and inspect the data."
    scoring_type: "stringmatch"
    expected_response: "{{sqlite_query:SELECT name FROM customers LIMIT 1:TARGET_FILE}}"
    sandbox_setup:
      type: "create_sqlite"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}.db"
      content:
        table_name: "customers"
        columns:
          - {name: "id", type: "auto_id"}
          - {name: "name", type: "TEXT"}
          - {name: "age", type: "INTEGER"}
          - {name: "city", type: "TEXT"}
        rows: 5

  - question_id: 8
    samples: 2
    template: "What is the total amount of all orders in the database {{artifacts}}/{{qs_id}}/{{entity1}}.db? Hint: study the schema first to know how to navigate and inspect the data."
    scoring_type: "stringmatch"
    expected_response: "{{sqlite_query:SELECT SUM(amount) FROM orders:TARGET_FILE}}"
    sandbox_setup:
      type: "create_sqlite"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}.db"
      content:
        tables:
          - name: "customers"
            columns:
              - {name: "id", type: "auto_id"}
              - {name: "name", type: "TEXT"}
              - {name: "email", type: "TEXT"}
            rows: 3
          - name: "orders"
            columns:
              - {name: "id", type: "auto_id"}
              - {name: "customer_id", type: "INTEGER"}
              - {name: "amount", type: "INTEGER"}
              - {name: "date", type: "DATE"}
            rows: 8

  - question_id: 9
    samples: 2
    template: "Find customers who have orders above 10000 in the database {{artifacts}}/{{qs_id}}/{{entity1}}.db. How many are there? Hint: study the schema first to know how to navigate and inspect the data."
    scoring_type: "stringmatch"
    expected_response: "{{sqlite_query:SELECT COUNT(DISTINCT c.name) FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.amount > 10000:TARGET_FILE}}"
    sandbox_setup:
      type: "create_sqlite"
      target_file: "{{artifacts}}/{{qs_id}}/{{entity1}}.db"
      content:
        tables:
          - name: "customers"
            columns:
              - {name: "id", type: "auto_id"}
              - {name: "name", type: "TEXT"}
              - {name: "city", type: "TEXT"}
            rows: 5
          - name: "orders"
            columns:
              - {name: "id", type: "auto_id"}
              - {name: "customer_id", type: "INTEGER"}
              - {name: "amount", type: "INTEGER"}
              - {name: "product", type: "TEXT"}
            rows: 12
